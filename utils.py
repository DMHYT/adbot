# Цей скрипт мiстить кориснi функцiї для нашої програми

# Iмпортуємо об'єкт windll з модуля ctypes
# для отримання ширини та висоти монiтора в пiкселях
from ctypes import windll
# Також нам знадобиться метод walk з модуля os,
# для отримання всiх файлiв та папок у данiй папцi
from os import walk
# А також метод join з модуля os.path,
# для отримання повного шляху до певного файла або папки,
# з даних iмен папок та файлiв
from os.path import join


# Перша функцiя - для отримання входу додатнього числа вiд користувача.
# Вона використовується при iнiцiалiзацiї об'єкта Bot.
# Тут ми додаємо необов'язковий параметр `seconds` булевого типу.
# Коли бот просить ввести залишок вiд тривалостi вiдео в секундах,
# значення секунд НЕ МОЖЕ бути вiд'ємним, проте МОЖЕ бути нулем.
def get_positive_int_input(hint: str, seconds=False) -> int:
    # Якщо ми конвертуємо рядковий вхiд користувача в цiле число,
    # але при цьому користувач не ввiв правильнi данi,
    # винике виняток ValueError.
    # Тут ми робимо обробку цього винятку, яка буде
    # намагатись отримати вхiд користувача ще раз,
    # якщо вхiднi данi були некоректними
    try:
        result = int(input(hint + ": "))
        # Також тут нам потрiбнi саме додатнi цiлi числа,
        # тому що тривалiсть вiдео та iнтервал мiж паузами не може бути вiд'ємним або нулем.
        # Отже, якщо вхiд недодатнiй, ми вручну викликаємо виняток ValueError,
        # а так як у нас вже є його обробка, програма ще раз попросить користувача ввести данi.
        # Але залишок тривалостi вiдео в секундах може також бути нулем,
        # тому тут ми додаємо додаткову перевiрку.
        if ((not seconds) and result <= 0) or result < 0:
            raise ValueError()
        # Врештi, якщо вхiд повнiстю правильний, повертаємо його.
        else:
            return result
    except ValueError:
        print("ПОМИЛКА! Вхiднi данi повиннi бути цiлочислового типу й невiд'ємними. Спробуйте ще раз...")
        return get_positive_int_input(hint)


# Друга функцiя буде повертати роздiльну здатнiсть користувача в пiкселях.
# Вихiдними даними буде кортеж iз ширини та висоти монiтора
def get_monitor_size() -> tuple:
    return (
        windll.user32.GetSystemMetrics(0),
        windll.user32.GetSystemMetrics(1)
    )


# I ще одна функцiя, яка шукає файл з даним iменем в данiй папцi.
# Тут ми використовуємо кiлька методiв з модулiв os та os.path
def find_files(filename, search_path) -> list:
    result = []
    for root, d, files in walk(search_path):
        if filename in files:
            result.append(join(root, filename))
    return result


# Цей скрипт можна запустити тiльки для налагодження.
# Вiн просто надрукує в консоль роздiльну здатнiсть монiтора користувача
if __name__ == "__main__":
    width, height = get_monitor_size()
    print("Роздiльна здатнiсть вашого монiтора - " + str(width) + "x" + str(height))