# Этот скрипт содержит полезные функции для нашей программы

# Импортируем объект windll из модуля ctypes
# для получения ширины и высоты монитора в пикселях
from ctypes import windll
# Также нам понадобится метод walk из модуля os,
# для получения всех файлов и папок в данной папке
from os import walk
# А также метод join из модуля os.path,
# для получения полного пути к определённому файлу или папке,
# из данных имён папок и файла
from os.path import join


# Первая функция - для получения ввода положительного числа от пользователя.
# Она используется при инициализации объекта Bot.
# Здесь мы добавляем необязательный параметр `seconds` булевого типа.
# Когда бот просит ввести остаток от длительности видео в секундах,
# значение секунд НЕ МОЖЕТ быть отрицательным, однако МОЖЕТ быть нулём.
def get_positive_int_input(hint: str, seconds=False) -> int:
    # Если мы конвертируем строковой ввод пользователя в целое число,
    # но при этом пользователь не ввёл правильные данные,
    # возникнет исключение ValueError.
    # Здесь мы добавляем обработку этого исключения, которая будет
    # пробовать получить ввод пользователя ещё раз,
    # если вводные данные были некорректными
    try:
        result = int(input(hint + ": "))
        # Также здесь нам нужны именно положительные целые числа,
        # потому что длительность видео и интервал между паузами не может быть отрицательным или нулём,
        # Значит, если ввод неположительный, мы вручную вызываем исключение ValueError,
        # а так как у нас уже есть его обработка, программа ещё раз попросит пользователя ввести данные.
        # Но остаток длительности видео в секундах может также быть нулём,
        # поэтому здесь мы добавляем дополнительную проверку.
        if ((not seconds) and result <= 0) or result < 0:
            raise ValueError()
        # Наконец, если ввод полностью правильный, возвращаем его.
        else:
            return result
    except ValueError:
        print("ОШИБКА! Вводные данные должны быть целочисленного типа и неотрицательными. Попробуйте ещё раз...")
        return get_positive_int_input(hint)


# Вторая функция будет возвращать разрешение монитора пользователя в пикселях.
# Выходными данными будет кортеж из ширины и высоты монитора
def get_monitor_size() -> tuple:
    return (
        windll.user32.GetSystemMetrics(0),
        windll.user32.GetSystemMetrics(1)
    )


# И ещё одна функция, которая ищет файл с данным именем в данной папке.
# Здесь мы используем несколько методов из модулей os и os.path
def find_files(filename, search_path) -> list:
    result = []
    for root, d, files in walk(search_path):
        if filename in files:
            result.append(join(root, filename))
    return result


# Этот скрипт можно запустить только для отладки.
# Он просто напечатает в консоль разрешение монитора пользователя
if __name__ == "__main__":
    width, height = get_monitor_size()
    print("Разрешение вашего монитора - " + str(width) + "x" + str(height))